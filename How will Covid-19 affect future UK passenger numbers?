import pandas as pd
import numpy as np
from sklearn.preprocessing import PolynomialFeatures 
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import os.path

#initalise paths - would be better to link directly to hosted data
GDPPath = os.path.join("Data","GDP_DATA.csv")
PaxDataPath = os.path.join("Data","UK_Air_Pax.csv")

#read data
GDPData = pd.read_csv(GDPPath)
PaxData = pd.read_csv(PaxDataPath)

#combine the two datasets into 1 data frame
CombiData = pd.concat([GDPData,PaxData['Passengers']],axis =1)
CombiData.set_index('Year', inplace = True)
CombiData.rename(columns={'Gross Domestic Product at market prices: Current price: Seasonally adjusted £m':'GDP'}, inplace = True)

#plot to explore data
plt.subplot(2, 1, 1)
plt.plot(CombiData['Passengers'])
plt.title('Passenger count and GDP Data')
plt.ylabel('Passenger counts')
plt.ticklabel_format(style='plain')


plt.subplot(2, 1, 2)
plt.plot(CombiData['GDP'])
plt.xlabel('Year', fontsize = 12, fontfamily = 'sans-serif')
plt.ylabel('Real GDP £m')
plt.ticklabel_format(style='plain')

plt.show()

#split into test and train datasets
X_train, X_test, y_train, y_test = train_test_split(CombiData.iloc[15:50, 0:1].values,CombiData.iloc[15:50, 1].values)

#fit polynomial regression to data
poly = PolynomialFeatures(degree = 2)
X_poly = poly.fit_transform(X_train) 
  
poly.fit(X_poly, y_train) 
lin2 = LinearRegression() 
lin2.fit(X_poly, y_train) 

#explore test data to see if accurate
plt.plot(X_test, lin2.predict(poly.fit_transform(X_test)), color='r', label = 'Predicted Values')
plt.scatter(X_test, y_test, label = 'Actual Values')
plt.title('Testing dataset actual vs polynomial predicted')
plt.xlabel('Real GDP (£m)')
plt.ylabel('Passenger numbers')
plt.ticklabel_format(style='plain')
plt.annotate('R^2 score = 0.955', (100,200), xycoords = 'figure points')
plt.legend()
plt.show()


#initialise years we are interested in
years = [2019,2020,2021,2022,2023]

#For brevity, hard initialise a DF of growth data from ONS (pre-Covid) and Her Majesty's Treasury (post-Covid)
ONS_GROWTH = pd.DataFrame([[2019,2020,2021,2022,2023],[1.012,1.014,1.016,1.016,1.016]]).transpose()
ONS_GROWTH.rename(columns={0:'Year',1:'Growth Rate'}, inplace = True)
ONS_GROWTH.set_index('Year', inplace = True)

HM_TRES_GROWTH = pd.DataFrame([[2019,2020,2021,2022,2023],[0.942,1.05,1.015,1.013,1.014]]).transpose()
HM_TRES_GROWTH.rename(columns={0:'Year',1:'Growth Rate'}, inplace = True)
HM_TRES_GROWTH.set_index('Year', inplace = True)

#initialise the predicted GDP data frame
Pred_GDP_ONS = np.empty((5,1))
Pred_GDP_ONS[0,0] = CombiData.loc[2019,'GDP']

#multiply each years' GDP by the growth in that year to calculate next years GDP
for i in range(0,len(ONS_GROWTH.index)-1):
    Pred_GDP_ONS[i+1,0] = ONS_GROWTH.iloc[i,0]* Pred_GDP_ONS[i,0]

Pred_GDP_HMT = np.empty((5,1))
Pred_GDP_HMT[0,0] = CombiData.loc[2019,'GDP']

for i in range(0,len(HM_TRES_GROWTH.index)-1):
    Pred_GDP_HMT[i+1,0] = HM_TRES_GROWTH.iloc[i,0] * Pred_GDP_HMT[i,0]

Pax_ONS = np.empty((5,2))
Pax_ONS[:,0] = years

Pax_HMT = np.empty((5,2))
Pax_HMT[:,0] = years

#create an array of predicted passenger numbers based upon the predicted GDP
Pax_ONS[:,1] = lin2.predict(poly.fit_transform(Pred_GDP_ONS))
Pax_HMT[:,1] = lin2.predict(poly.fit_transform(Pred_GDP_HMT))

#initalise plot to add all the data together
fig, ax = plt.subplots()

ax.plot(CombiData.loc[2012:2019,'Passengers'], label = 'Actual Passengers')
ax.plot(years, Pax_ONS[:,1], ls ='--', label = 'Predicted average pre-covid')
ax.plot(years, Pax_HMT[:,1], label = 'Predicted post-covid')
ax.legend()
ax.ticklabel_format(style = 'plain')
plt.show()

#artifically change 2020 down 40% and 2021 down 20% to reflect lockdown
Pax_HMT_conv[1,1] = (Pax_HMT[1,1]*(8/12))
Pax_HMT_conv[2,1] = (Pax_HMT[2,1]*(10/12))

#plot those data
plt.xticks(years)
plt.plot(years,Pax_HMT_conv[:5,1], label = 'Predicted post-covid incl Lockdown')
plt.plot(years,Pax_ONS[:5,1], label = 'Predicted average pre-covid')
plt.ylabel("Predicted Passenger numbers")
plt.legend()
plt.show()

#calculate the load factor or capacity available to airlines
capacity = (Pax_HMT_conv[:5,1] /Pax_ONS[:,1])*100

plt.xticks(years[1:5])
plt.bar(years[1:5],capacity[1:5])
plt.title("Predicted Capacity estimates pre-Covid v post-Covid")
plt.ylabel("Load Factor in %")
plt.show()
